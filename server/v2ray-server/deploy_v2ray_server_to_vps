#!/bin/sh

self="$(curl https://raw.githubusercontent.com/zw963/deployment_bash/v0.5.3/deploy_start.sh)" && eval "$self"

export target=$1

function postinstall () {
    set -u
    cat <<HEREDOC > router/opt/etc/v2ray.json
{
    "inbounds": [
        {
            "port": 1081, // 监听端口
            "protocol": "socks", // 入口协议为 SOCKS 5
            "sniffing": {
                "enabled": true,
                "destOverride": ["http", "tls"]
            },
            "settings": {
                "auth": "noauth"  //socks的认证设置，noauth 代表不认证，由于 socks 通常在客户端使用，所以这里不认证
            }
        }
    ],
    "outbounds": [
        {
            "protocol": "vmess", // 出口协议
            "settings": {
                "vnext": [
                    {
                        "address": "${targetip}",
                        "port": "SERVER_PORT",
                        "users": [
                            {
                                "id": "NEWUUID",  // 用户 ID，必须与服务器端配置相同
                                "alterId": 64 // 此处的值也应当与服务器相同
                            }
                        ]
                    }
                ]
            }
        }
    ]
}
HEREDOC
}

copy v2ray-server/server.json /etc/v2ray/config.json

deploy_start

# Following code is execute on remote VPS

wget https://install.direct/go.sh
# bash go.sh

uuid=$(uuidgen)

replace_string 'NEWUUID' "${uuid}" /etc/v2ray/config.json

cat <<'HEREDOC' > /etc/sysctl.d/98-shadowsocks.conf
fs.file-max=51200

net.core.rmem_max=67108864
net.core.wmem_max=67108864
net.core.netdev_max_backlog=250000
net.core.somaxconn=4096

net.ipv4.tcp_syncookies=1
net.ipv4.tcp_tw_reuse=1
net.ipv4.tcp_tw_recycle=0
net.ipv4.tcp_fin_timeout=30
net.ipv4.tcp_keepalive_time=1200
net.ipv4.ip_local_port_range=10000 65000
net.ipv4.tcp_max_syn_backlog=8192
net.ipv4.tcp_max_tw_buckets=5000
net.ipv4.tcp_mem=25600 51200 102400
net.ipv4.tcp_rmem=4096 87380 67108864
net.ipv4.tcp_wmem=4096 65536 67108864
net.ipv4.tcp_mtu_probing=1
net.ipv4.tcp_congestion_control=hybla

# 开启内核 fastopen, Linux 3.7 以上支持, 3.13 才默认开启.
# 等价于 echo 3 > /proc/sys/net/ipv4/tcp_fastopen
net.ipv4.tcp_fastopen=3
HEREDOC

if kernel_version_greater_than 4.9; then
    modprobe tcp_bbr && lsmod | grep bbr
    echo "net.core.default_qdisc=fq" >> /etc/sysctl.d/98-shadowsocks.conf
    echo "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.d/98-shadowsocks.conf
fi

sysctl -p > /dev/null

# test bbr is enabled
# sysctl net.ipv4.tcp_available_congestion_control |grep bbr
# sysctl -n net.ipv4.tcp_congestion_control |grep bbr

if [[ -e /etc/redhat-release && $(cat /etc/redhat-release) =~ CentOS ]]; then
    systemctl enable v2ray
    systemctl restart v2ray
    systemctl status v2ray
elif [[ $(cat /etc/issue) =~ Ubuntu|Mint|Deepin ]]; then
    systemctl enable v2ray
    systemctl restart v2ray
    systemctl status v2ray
fi

server_port=$(cat /etc/v2ray/config.json |grep 'inbounds"' -A2 |tail -n1|grep -o '[0-9]*')
expose_port $server_port

echo "Your's server port: [0m[33m${server_port}[0m"
echo "Your's server id (password): [0m[33m${uuid}[0m"
echo "replace SERVER_PORT and NEWUUID in router/opt/etc/v2ray.json with above value."
